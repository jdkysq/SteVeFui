<?php

namespace Steve\FrontendBundle\Entity;

use Symfony\Component\Serializer\Serializer;

use Doctrine\ORM\EntityRepository;

/**
 * ConnectorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConnectorRepository extends EntityRepository
{
	
	
	/**
	 * Get connectorPk
	 *
	 * @return bool
	 */
	public function setTransactionStatus($transaction_status)
	{
		return $this->transaction_status = $transaction_status;
	}
	
	public function findOneByconnectorPKJoinedToTransaction($connector_pk)
	{
		
		$fields = array('c.connectorid as connectorid', 'IDENTITY(c.chargeboxid) as chargeboxid', 't.transactionPk', 't.starttimestamp', 't.stoptimestamp', 'IDENTITY(t.idtag) as idtag', 'cs.status', 'cs.errorcode', 'cb.lastheartbeattimestamp');
		$query = $this->getEntityManager()->createQueryBuilder()
		->select($fields)
		->from('SteveFrontendBundle:Connector', 'c')
		->leftJoin("SteveFrontendBundle:ConnectorStatus", "cs", "WITH", "c.connectorPk=cs.connectorPk")
		->leftJoin("SteveFrontendBundle:Transaction", "t", "WITH", "c.connectorPk=t.connectorPk")
		->leftJoin("SteveFrontendBundle:Chargebox", "cb", "WITH", "c.chargeboxid=cb.chargeboxid")
		->where('c.connectorPk = '.$connector_pk.'')
		->addOrderBy('t.transactionPk', 'desc')		
		->addOrderBy('cs.statustimestamp', 'desc')		
		->setMaxResults(1)
		->getQuery();
		
		try {
			return $query->getSingleResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
			return null;
		}
		return null;
	}
	public function getConnectorTransaction($connector_pk)
	{
		//$em = $this->getEntityManager();
		//$em = $this->getEntityManager();
		
		//	$connector->set
		//$connector->setTransactionStatus(1);
		/*
		$q2 = $em->createQueryBuilder('r');
		$q2->where('1=1')
		->setParameter('key', $key);
		*/
		//$connector->setParameter('transaction_status', 1);
		/*
		$q2 = $connector->createQueryBuilder('r')->setMaxResults(1);
		
		
		
		$q2 = $q2->getQuery();
		
		$q2 = $q2->getArrayResult();
		
		///print_r($q2);
		//$res2 = $q2->getResult();
		
		
		$connector = $connector->getArrayResult();
		
		//print_r($connector);
		die;
		*/
		
		$connector = $this->findOneByconnectorPKJoinedToTransaction($connector_pk);
		
		//$connector = $connector->getArrayResult();
		
		/*
		 * simulation vor Transaction without change Connector status
		 * */
		$sim = 1;
		
		 
		if ($sim == 1)
		{
			$connector['connectorstatus'] = false;
			
			if ($connector['status']=="Available" && $connector['errorcode']=="NoError")
			{
				$connector['connectorstatus'] = true;
			}
			if ($connector['errorcode']!="NoError"){
				$connector['status']="Faulted";
			}
	
			if ($connector['starttimestamp']!="" && $connector['stoptimestamp']=="")
			{
				$connector['transactionstatus'] = true;
				//$connector['status']="Occupied";
			}else{
				$connector['transactionstatus'] = false;
			}
		}
		
		
		/* Help var for View, because  $connector['status'] will translatedt */
		if ($connector['status']=="Available")
		{
			$connector['connectorstatus'] = 1;
		}elseif ($connector['status']=="Occupied"){
			$connector['connectorstatus'] = 2;
		}else{
			$connector['connectorstatus'] = 3;
		}
		
		// Ladevorgang wurde zvorzeitig beendet z.B. durch Stecker rausziehen
		if($connector['status']=="Available" && $connector['transactionstatus'] == true)
			$connector['connectorstatus'] = 6;
		
		if ($connector['starttimestamp']!="" && $connector['stoptimestamp']=="")
		{
			$connector['transactionstatus'] = true;
		}else{
			$connector['transactionstatus'] = false;
		}
		
		if ($connector['status']=="Occupied" && $connector['transactionstatus'] == true)
		{
			$connector['connectorstatus'] = 7;
		}
		if ($connector['status']=="Occupied" && $connector['transactionstatus'] == false)
		{
			$connector['connectorstatus'] = 8;
		}
		$station = $connector['lastheartbeattimestamp']->getTimestamp();
		$dif = time() - $station;
		
		// einen Tag nicht erreichbar oder noch nie errechbar
		if (($dif - 60*60*24)>0){
			$connector['connectorstatus'] = 5;
		}else if(($dif - 60*60)>0){ // zwei Stunde nicht erreichbar
			$connector['connectorstatus'] = 4;
		}
		
		return $connector;
	}	
	
}